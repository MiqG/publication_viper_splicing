"""
Author: Miquel Anglada Girotto
Contact: miquelangladagirotto [at] gmail [dot] com
"""

import os
import pandas as pd

# variables
ROOT = os.path.dirname(os.path.dirname(os.getcwd()))
RAW_DIR = os.path.join(ROOT,"data","raw")
PREP_DIR = os.path.join(ROOT,"data","prep")
SUPPORT_DIR = os.path.join(ROOT,"support")
RESULTS_DIR = os.path.join(ROOT,"results","tfs_splicing")

CANCER_TYPES = [
    #'ACC',
    'BLCA',
    'BRCA',
    'CESC',
    #'CHOL',
    'COAD',
    #'DLBC',
    #'ESCA',
    'GBM',
    'HNSC',
    #'KICH',
    'KIRC',
    'KIRP',
    #'LAML',
    #'LGG',
    'LIHC',
    'LUAD',
    #'LUSC',
    #'MESO',
    #'OV',
    'PAAD',
    'PCPG',
    'PRAD',
    'READ',
    'SARC',
    #'SKCM',
    #'STAD',
    'TGCT',
    'THCA',
    'THYM',
    'UCEC',
    #'UCS',
    #'UVM'
]

DATASETS = CANCER_TYPES

##### RULES #####
rule all:
    input:
        # infer activities
        expand(os.path.join(RESULTS_DIR,'files','viper_activities','TCGA','{dataset}-{dataset}_regulons.tsv.gz'), dataset=DATASETS),
        # correlate activities with splicing
        expand(os.path.join(RESULTS_DIR,"files","tf_activity_vs_splicing","spearman_correlation","TCGA","{dataset}.tsv.gz"), dataset=DATASETS),
        # concatenate results
        os.path.join(RESULTS_DIR,"files","tf_activity_vs_splicing","spearman_correlation","TCGA","PANCAN.tsv.gz")
        
        # figures
        #os.path.join(RESULTS_DIR,'figures','tf_activity_vs_splicing')
        
rule run_viper_tcga:
    input:
        genexpr = os.path.join(PREP_DIR,"genexpr_tpm","{dataset}.tsv.gz"),
        gene_annotation = os.path.join(RAW_DIR,"HGNC","gene_annotations.tsv.gz")
    output:
        os.path.join(RESULTS_DIR,'files','viper_activities','TCGA','{dataset}-{dataset}_regulons.tsv.gz')
    params:
        cancer_type = "{dataset}"
    shell:
        """
        Rscript scripts/run_viper_tcga.R \
                    --genexpr_file={input.genexpr} \
                    --gene_annotation={input.gene_annotation} \
                    --cancer_type={params.cancer_type} \
                    --output_file={output}
        """
        
        
rule correlate_tf_activities_with_splicing_tcga:
    input:
        splicing = os.path.join(PREP_DIR,"event_psi","{dataset}-EX.tsv.gz"),
        activity = os.path.join(RESULTS_DIR,'files','viper_activities','TCGA','{dataset}-{dataset}_regulons.tsv.gz'),
        event_annotation = os.path.join(RAW_DIR,"VastDB","event_annotation-Hs2.tsv.gz")
    output:
        os.path.join(RESULTS_DIR,"files","tf_activity_vs_splicing","spearman_correlation","TCGA","{dataset}.tsv.gz")
    params:
        cancer_type = "{dataset}"
    threads: 24
    resources:
        runtime = 3600*1, # h 
        memory = 10 #GB
    run:
        import pandas as pd
        import numpy as np
        from scipy import stats
        from joblib import Parallel, delayed
        
        splicing = pd.read_table(input.splicing, index_col=0)
        activity = pd.read_table(input.activity)
        event_annot = pd.read_table(input.event_annotation)
        n_jobs = threads
        cancer_type = params.cancer_type
        
        # prep
        activity = activity.drop(columns=["symbol","regulator"]).set_index("ensembl").copy()
        splicing = splicing.loc[(splicing.std(1) / splicing.mean(1)) > 0.01].copy()
        event_annot = event_annot.loc[
            event_annot["ENSEMBL"].isin(activity.index) &\
            event_annot["EVENT"].isin(splicing.index)
        ].copy()
        
        # subset
        common_samples = set(activity.columns).intersection(splicing.columns)
        activity = activity[common_samples].copy()
        splicing = splicing[common_samples].copy()
        
        # correlate splicing inclusion with TF activity
        def correlate(x, y):
            not_missing = np.isfinite(x) & np.isfinite(y)
            x = x[not_missing]
            y = y[not_missing]
            
            correlation, pvalue = stats.spearmanr(x, y)
            
            result = pd.Series({
                "ENSEMBL": x.name, "EVENT": y.name, 
                "spearman_correlation": correlation, "spearman_pvalue": pvalue,
                "spearman_n_obs": len(x)
            })
            
            return result
        
        corrs = Parallel(n_jobs=n_jobs)(
            delayed(correlate)(
                x = activity.loc[gene],
                y = splicing.loc[event]
            )
            for gene, event in event_annot[["ENSEMBL","EVENT"]].values
        )
        corrs = pd.DataFrame(corrs)
        
        corrs["cancer_type"] = cancer_type
        
        # save
        corrs.to_csv(output[0], sep="\t", compression="gzip", index=False)
        
        print("Done!")
        
        
rule combine_corrs_tcga:
    input:
        corrs = [os.path.join(RESULTS_DIR,"files","tf_activity_vs_splicing","spearman_correlation","TCGA","{dataset}.tsv.gz").format(dataset=dataset) for dataset in DATASETS]
    output:
        os.path.join(RESULTS_DIR,"files","tf_activity_vs_splicing","spearman_correlation","TCGA","PANCAN.tsv.gz")
    run:
        import pandas as pd
        
        df = pd.concat([pd.read_table(f) for f in input.corrs])
        
        df.to_csv(output[0], sep="\t", compression="gzip", index=False)
        
        print("Done!")
        
        
rule figures_activity_splicing:
    input:
        correlations = os.path.join(RESULTS_DIR,"files","tf_activity_vs_splicing","spearman_correlation","TCGA","PANCAN.tsv.gz")
    output:
        directory(os.path.join(RESULTS_DIR,'figures','tf_activity_vs_splicing'))
    shell:
        """
        Rscript scripts/figures_activity_splicing.R \
                    --correlations_file={input.correlations} \
                    --figs_dir={output}
        """