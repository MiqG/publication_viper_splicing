"""
Author: Miquel Anglada Girotto
Contact: miquelangladagirotto [at] gmail [dot] com

Outline
-------
1. Protein activity vs gene dependency: cancer-driver splicing factors
2. Protein activity vs drugs IC50: drug-SF interaction
3. Protein activity vs protein activity: splicing factors cross regulation
4. Protein activity vs met map: metastatic potential
"""

import os

# variables
ROOT = os.path.dirname(os.path.dirname(os.getcwd()))
RAW_DIR = os.path.join(ROOT,"data","raw")
PREP_DIR = os.path.join(ROOT,"data","prep")
SUPPORT_DIR = os.path.join(ROOT,"support")
BIN_DIR = os.path.join(ROOT,"bin")
RESULTS_DIR = os.path.join(ROOT,"results","sf_activity_ccle")
ACTVAL_DIR = os.path.join(ROOT,"results","validation_activity")
SAVE_PARAMS = {"sep":"\t", "index":False, "compression":"gzip"}

##### RULES #####
rule all:
    input:
        # calculate signature
        os.path.join(RESULTS_DIR,"files","signatures","CCLE-EX.tsv.gz"),
        
        # compute viper SF activities
        os.path.join(RESULTS_DIR,"files","protein_activity","CCLE.tsv.gz"),
        
        # associate SF activities to gene dependencies
        os.path.join(RESULTS_DIR,"files","protein_activity_vs_demeter2","CCLE.tsv.gz"),
        
        # associate SF 
        os.path.join(RESULTS_DIR,"files","protein_activity_vs_metmap","CCLE.tsv.gz")

        
rule compute_signature:
    input:
        splicing = os.path.join(PREP_DIR,"event_psi","CCLE-EX.tsv.gz")
    output:
        signature = os.path.join(RESULTS_DIR,"files","signatures","CCLE-EX.tsv.gz")
    run:
        import pandas as pd
        
        splicing = pd.read_table(input.splicing, index_col=0)
        
        signature = splicing - splicing.median(axis=1).values.reshape(-1,1)
        
        signature.reset_index().to_csv(output.signature, **SAVE_PARAMS)
        
        print("Done!")
        
        
rule compute_protein_activity:
    input:
        signature = os.path.join(RESULTS_DIR,"files","signatures","CCLE-EX.tsv.gz"),
        regulons_dir = os.path.join(ACTVAL_DIR,"files","subsetted_regulons","regulons_selected")
    output:
        os.path.join(RESULTS_DIR,"files","protein_activity","CCLE.tsv.gz")
    params:
        script_dir = BIN_DIR
    shell:
        """
        Rscript {params.script_dir}/compute_protein_activity.R \
                    --signature_file={input.signature} \
                    --regulons_dir={input.regulons_dir} \
                    --output_file={output}
        """
        
rule associate_sf_activities_to_gene_dependency:
    input:
        sf_activities = os.path.join(RESULTS_DIR,"files","protein_activity","CCLE.tsv.gz"),
        gene_dependency = os.path.join(PREP_DIR,"demeter2","CCLE.tsv.gz"),
        gene_annotations = os.path.join(RAW_DIR,"HGNC","gene_annotations.tsv.gz")
    output:
        os.path.join(RESULTS_DIR,"files","protein_activity_vs_demeter2","CCLE.tsv.gz")
    run:
        import pandas as pd
        from scipy import stats
        
        # load
        sf_activities = pd.read_table(input.sf_activities, index_col=0)
        gene_dependency = pd.read_table(input.gene_dependency, index_col=0)
        gene_annotations = pd.read_table(input.gene_annotations)
        
        # translate gene names
        sf_activities.index = [
            gene_annotations.loc[gene_annotations["Ensembl gene ID"]==ensembl,"Approved symbol"].values[0] 
            for ensembl in sf_activities.index
        ]
        
        # subset
        common_genes = set(sf_activities.index).intersection(gene_dependency.index)
        common_samples = set(sf_activities.columns).intersection(gene_dependency.columns)
        sf_activities = sf_activities.loc[common_genes, common_samples]
        gene_dependency = gene_dependency.loc[common_genes, common_samples]
        
        # correlate
        corrs = []
        for sf in common_genes:
            x = sf_activities.loc[sf]
            y = gene_dependency.loc[sf]
            nonmissing = ~(x.isnull() | y.isnull())
            pearson_coef, pearson_pvalue = stats.pearsonr(x[nonmissing], y[nonmissing])
            spearman_coef, spearman_pvalue = stats.spearmanr(x[nonmissing], y[nonmissing])
            n_obs = sum(nonmissing)
            corr = {
                "GENE": sf,
                "pearson_coef": pearson_coef,
                "pearson_pvalue": pearson_pvalue,
                "spearman_coef": spearman_coef,
                "spearman_pvalue": spearman_pvalue,
                "n_obs": n_obs
            }
            corrs.append(corr)
        corrs = pd.DataFrame(corrs)
            
        # add ensembl identifiers
        corrs["ENSEMBL"] = [
            gene_annotations.loc[gene_annotations["Approved symbol"]==symbol,"Ensembl gene ID"].values[0] 
            for symbol in corrs["GENE"]
        ]
        
        # save
        corrs.to_csv(output[0], **SAVE_PARAMS)
        
        print("Done!")
        
        
rule associate_sf_activities_to_metastatic_potential:
    input:
        sf_activities = os.path.join(RESULTS_DIR,"files","protein_activity","CCLE.tsv.gz"),
        metmap = os.path.join(PREP_DIR,"metmap","CCLE.tsv.gz"),
        gene_annotations = os.path.join(RAW_DIR,"HGNC","gene_annotations.tsv.gz")
    output:
        os.path.join(RESULTS_DIR,"files","protein_activity_vs_metmap","CCLE.tsv.gz")
    run:
        import pandas as pd
        from scipy import stats
        
        tissues = ["brain","lung","liver","bone","kidney","all5"]        

        # load
        sf_activities = pd.read_table(input.sf_activities, index_col=0)
        metmap = pd.read_table(input.metmap).set_index("DepMap_ID")
        gene_annotations = pd.read_table(input.gene_annotations)
        
        # subset
        common_samples = set(sf_activities.columns).intersection(metmap.index)
        sf_activities = sf_activities[common_samples]
        metmap = metmap.loc[common_samples]
        
        # correlate
        corrs = []
        for tissue in tissues:
            pearson = sf_activities.apply(lambda row: stats.pearsonr(row, metmap["mean_%s" % tissue]), axis=1)
            pearson = pd.DataFrame(pearson.to_list(), index=pearson.index, columns=["pearson_coef","pearson_pvalue"])
            spearman = sf_activities.apply(lambda row: stats.spearmanr(row, metmap["mean_%s" % tissue]), axis=1)
            spearman = pd.DataFrame(spearman.to_list(), index=spearman.index, columns=["spearman_coef","spearman_pvalue"])
            corr = pd.concat([pearson, spearman], axis=1).reset_index()
            corr["metastatic_tissue"] = tissue
            corrs.append(corr)
        corrs = pd.concat(corrs)
            
        # add gene symbols
        corrs = corrs.rename(columns={"regulator":"ENSEMBL"})
        corrs["GENE"] = [
            gene_annotations.loc[gene_annotations["Ensembl gene ID"]==ensembl,"Approved symbol"].values[0] 
            for ensembl in corrs["ENSEMBL"]
        ]
        
        # save
        corrs.to_csv(output[0], **SAVE_PARAMS)
        
        print("Done!")
        