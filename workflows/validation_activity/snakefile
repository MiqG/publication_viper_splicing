"""
Author: Miquel Anglada Girotto
Contact: miquelangladagirotto [at] gmail [dot] com
"""

import os
# variables
ROOT = os.path.dirname(os.path.dirname(os.getcwd()))
RAW_DIR = os.path.join(ROOT,"data","raw")
PREP_DIR = os.path.join(ROOT,"data","prep")
SUPPORT_DIR = os.path.join(ROOT,"support")
RESULTS_DIR = os.path.join(ROOT,"results","validation_activity")
REGINF_DIR = os.path.join(ROOT,"results","regulon_inference")
REGEVAL_DIR = os.path.join(ROOT,"results","regulon_evaluation")
SAVE_PARAMS = {"sep":"\t", "index":False, "compression":"gzip"}

THRESHS_DPSI = {
    "morethan": [0,2.5,5,10,15,20,25,30,35],
    "lessthan": [  2.5,5,10,15,20,25,30,35,101]
}
THRESH_TYPES = ["lessthan","morethan"]

REGULONS = {
    "ENCORE_HepG2": os.path.join(REGINF_DIR,"files","regulons","pert_rnaseq","ENCORE","HepG2","delta_psi-EX.tsv.gz"),
    "ENCORE_K562": os.path.join(REGINF_DIR,"files","regulons","pert_rnaseq","ENCORE","K562","delta_psi-EX.tsv.gz")
}

CELL_LINES = ["K562","HepG2"]

##### RULES #####
rule all:
    input:
        # evaluate ENCORE KD ground truth
        ## subset regulons with different dPSI thresholds
        expand(os.path.join(RESULTS_DIR,"files","subsetted_regulons","regulons","{dataset}","dpsi_lessthan_{thresh}.tsv.gz"), dataset=REGULONS.keys(), thresh=THRESHS_DPSI["lessthan"]),
        expand(os.path.join(RESULTS_DIR,"files","subsetted_regulons","regulons","{dataset}","dpsi_morethan_{thresh}.tsv.gz"), dataset=REGULONS.keys(), thresh=THRESHS_DPSI["morethan"]),
        
        ## infer protein activities with those networks
        expand(os.path.join(RESULTS_DIR,"files","subsetted_regulons","protein_activity","{dataset}","{cell_line}-dpsi_{thresh_type}_{thresh}.tsv.gz"), dataset=REGULONS.keys(), cell_line=CELL_LINES, thresh=THRESHS_DPSI["lessthan"], thresh_type="lessthan"),
        expand(os.path.join(RESULTS_DIR,"files","subsetted_regulons","protein_activity","{dataset}","{cell_line}-dpsi_{thresh_type}_{thresh}.tsv.gz"), dataset=REGULONS.keys(), cell_line=CELL_LINES, thresh=THRESHS_DPSI["morethan"], thresh_type="morethan"),
        
        ## combine inferred protein activities
        os.path.join(RESULTS_DIR,"files","subsetted_regulons","protein_activity","merged.tsv.gz"),
        
        ## evaluate inferred protein activities
        os.path.join(RESULTS_DIR,"files","subsetted_regulons","evaluation_rankings.tsv.gz"),
        os.path.join(RESULTS_DIR,"files","subsetted_regulons","evaluation_corrs.tsv.gz"),
        
        # save selected regulons
        expand(os.path.join(RESULTS_DIR,"files","subsetted_regulons","regulons_selected","{dataset}-dpsi_morethan_15.tsv.gz"), dataset=REGULONS.keys())
        
        
rule subset_regulons_lessthan:
    input:
        regulons = lambda wildcards: REGULONS[wildcards.dataset]
    output:
        regulons = os.path.join(RESULTS_DIR,"files","subsetted_regulons","regulons","{dataset}","dpsi_lessthan_{thresh}.tsv.gz")
    params:
        thresh = "{thresh}"
    run:
        import pandas as pd
        
        regulons = pd.read_table(input.regulons)
        thresh = float(params.thresh)
        
        regulons = regulons.loc[regulons["likelihood"] <= thresh]
        
        regulons.to_csv(output.regulons, **SAVE_PARAMS)
        
        print("Done!")
        
        
rule subset_regulons_morethan:
    input:
        regulons = lambda wildcards: REGULONS[wildcards.dataset]
    output:
        regulons = os.path.join(RESULTS_DIR,"files","subsetted_regulons","regulons","{dataset}","dpsi_morethan_{thresh}.tsv.gz")
    params:
        thresh = "{thresh}"
    run:
        import pandas as pd
        
        regulons = pd.read_table(input.regulons)
        thresh = float(params.thresh)
        
        regulons = regulons.loc[regulons["likelihood"] >= thresh]
        
        regulons.to_csv(output.regulons, **SAVE_PARAMS)
        
        print("Done!")

        
rule compute_protein_activity:
    input:
        signature = os.path.join(PREP_DIR,"ground_truth_kd","ENCORE","{cell_line}","delta_psi-EX-masked.tsv.gz"),
        regulons = os.path.join(RESULTS_DIR,"files","subsetted_regulons","regulons","{dataset}","dpsi_{thresh_type}_{thresh}.tsv.gz")
    output:
        os.path.join(RESULTS_DIR,"files","subsetted_regulons","protein_activity","{dataset}","{cell_line}-dpsi_{thresh_type}_{thresh}.tsv.gz")
    params:
        assoc_method = "ground_truth",
        actinf_method = "viper"
    shell:
        """
        Rscript scripts/infer_protein_activity.R \
                    --signature_file={input.signature} \
                    --regulons_file={input.regulons} \
                    --output_file={output} \
                    --assoc_method={params.assoc_method} \
                    --actinf_method={params.actinf_method}
        """

        
rule combine_inferred_protein_activities:
    input:
        protein_activities = [
            os.path.join(RESULTS_DIR,"files","subsetted_regulons","protein_activity","{dataset}","{cell_line}-dpsi_{thresh_type}_{thresh}.tsv.gz").format(dataset=dataset, cell_line=cell_line, thresh_type="lessthan", thresh=thresh) for
            dataset in REGULONS.keys() for cell_line in CELL_LINES for thresh in THRESHS_DPSI["lessthan"]
        ] + [
            os.path.join(RESULTS_DIR,"files","subsetted_regulons","protein_activity","{dataset}","{cell_line}-dpsi_{thresh_type}_{thresh}.tsv.gz").format(dataset=dataset, cell_line=cell_line, thresh_type="morethan", thresh=thresh) for
            dataset in REGULONS.keys() for cell_line in CELL_LINES for thresh in THRESHS_DPSI["morethan"]
        ]
    output:
        os.path.join(RESULTS_DIR,"files","subsetted_regulons","protein_activity","merged.tsv.gz")
    run:
        import os
        import pandas as pd
        
        dfs = []
        for file in input.protein_activities:
            dataset = os.path.basename(os.path.dirname(file))
            cell_line = os.path.basename(file).split("-")[0]
            thresh_type = os.path.basename(file).split("-")[1].replace(".tsv.gz","").split("_")[1]
            thresh = os.path.basename(file).split("-")[1].replace(".tsv.gz","").split("_")[2]
            
            df = pd.read_table(file)
            df = df.melt(id_vars="regulator", var_name="KD", value_name="protein_activity")
            
            df["regulon"] = dataset
            df["cell_line"] = cell_line
            df["thresh_type"] = thresh_type
            df["thresh"] = float(thresh)
            
            dfs.append(df)
            
        dfs = pd.concat(dfs)
        
        dfs.to_csv(output[0], **SAVE_PARAMS)
        
        print("Done!")

        
rule evaluate_regulons:
    input:
        protein_activity = os.path.join(RESULTS_DIR,"files","subsetted_regulons","protein_activity","merged.tsv.gz")
    output:
        evaluation_rankings = os.path.join(RESULTS_DIR,"files","subsetted_regulons","evaluation_rankings.tsv.gz"),
        evaluation_corrs = os.path.join(RESULTS_DIR,"files","subsetted_regulons","evaluation_corrs.tsv.gz")
    run:
        import pandas as pd
        from scipy import stats
        
        df = pd.read_table(input.protein_activity)
        
        vars_oi = ["thresh_type","thresh","regulon","cell_line"]
        
        # ranking of KD across experiments
        df["ranking_between"] = df.groupby(vars_oi + ["regulator"])["protein_activity"].rank()
        # ranking of KD within experiments
        df["ranking_within"] = df.groupby(vars_oi + ["KD"])["protein_activity"].rank()
        # add ranking type
        df["eval_type"] = "real"
        # correlation between protein activities in both cell lines and regulons
        corrs = []
        for regulon in df["regulon"].unique():
            idx = (df["regulon"]==regulon) & (df["regulator"]==df["KD"])
            X = df.loc[idx].pivot(
                index=["thresh_type","thresh","regulon","regulator","KD"],
                columns="cell_line",
                values="protein_activity"
            )
            pearson_coef = X.reset_index().groupby(["thresh_type","thresh","regulon"])[["HepG2","K562"]].corr(method="pearson").iloc[0::2,-1]
            pearson_coef.name = "pearson_coef"
            spearman_coef = X.reset_index().groupby(["thresh_type","thresh","regulon"])[["HepG2","K562"]].corr(method="spearman").iloc[0::2,-1]
            spearman_coef.name = "spearman_coef"
            corrs.append(
                pd.concat([pearson_coef, spearman_coef], axis=1).reset_index()
            )
        corrs = pd.concat(corrs)
        corrs["cell_line"] = "HepG2_vs_K562"
        corrs["eval_type"] = "real"
        
        # store
        evaluation_rankings = df.copy()
        evaluation_corrs = corrs.copy()

        # randomize
        df["protein_activity"] = df.groupby(vars_oi + ["KD"])["protein_activity"].sample(frac=1, random_state=1).values
        # ranking of KD across experiments
        df["ranking_between"] = df.groupby(vars_oi + ["regulator"])["protein_activity"].rank()
        # ranking of KD within experiments
        df["ranking_within"] = df.groupby(vars_oi + ["KD"])["protein_activity"].rank()
        # add ranking type
        df["eval_type"] = "random"
        # correlation between protein activities in both cell lines and regulons
        corrs = []
        for regulon in df["regulon"].unique():
            idx = (df["regulon"]==regulon) & (df["regulator"]==df["KD"])
            X = df.loc[idx].pivot(
                index=["thresh_type","thresh","regulon","regulator","KD"],
                columns="cell_line",
                values="protein_activity"
            )
            pearson_coef = X.reset_index().groupby(["thresh_type","thresh","regulon"])[["HepG2","K562"]].corr(method="pearson").iloc[0::2,-1]
            pearson_coef.name = "pearson_coef"
            spearman_coef = X.reset_index().groupby(["thresh_type","thresh","regulon"])[["HepG2","K562"]].corr(method="spearman").iloc[0::2,-1]
            spearman_coef.name = "spearman_coef"
            corrs.append(
                pd.concat([pearson_coef, spearman_coef], axis=1).reset_index()
            )
        corrs = pd.concat(corrs)
        corrs["cell_line"] = "HepG2_vs_K562"
        corrs["eval_type"] = "random"        
        
        # store
        evaluation_rankings = pd.concat([evaluation_rankings, df])
        evaluation_corrs = pd.concat([evaluation_corrs, corrs])
        
        # save
        evaluation_rankings.to_csv(output.evaluation_rankings, **SAVE_PARAMS)
        evaluation_corrs.to_csv(output.evaluation_corrs, **SAVE_PARAMS)
        
        print("Done!")

rule selected_regulons:
    input:
        regulons = os.path.join(RESULTS_DIR,"files","subsetted_regulons","regulons","{dataset}","dpsi_morethan_15.tsv.gz")
    output:
        regulons = os.path.join(RESULTS_DIR,"files","subsetted_regulons","regulons_selected","{dataset}-dpsi_morethan_15.tsv.gz")
    shell:
        """
        set -eo pipefail
        
        cp {input.regulons} {output.regulons}
        
        echo "Done!"
        """
